---
- name: Artfactory absolute path is set
  set_fact:
     artifactoryAbsoluteUrl: "{{artifactoryUrl}}{{artifactName}}"
  no_log: true
  
- name: Find artifact file type
  shell: "echo '{{artifactName}}' |awk -F . '{if (NF>1) {print $NF}}'"
  register: extension
  
- name: CreateArtifactStore Directory for Tar
  shell: "mkdir -p '{{buildBaseDir}}'/tarDir"
  when: (extension.stdout == 'tar' )
  
- name: CreateArtifactStore Directory for Zip
  shell: "mkdir -p '{{buildBaseDir}}'/zipDir"
  when: (extension.stdout == 'zip' )
  
- name: TarFileName is set
  set_fact:
     tarFileName: "{{buildBaseDir}}/tarDir/{{artifactName}}"
  when: (extension.stdout == 'tar' )
     
- name: Download artifact from Artifactory if it is tar
  shell: " curl -u {{artifactUserName}}:{{artifact_password}} {{ artifactoryAbsoluteUrl }} -fo {{ tarFileName }}"
  when: not(
          (tarFileName is undefined)
          or
          (tarFileName  is none)
          or
          (tarFileName | trim == '')
        )
  no_log: true

- name: ZipFileName is set
  set_fact:
     zipFileName: "{{buildBaseDir}}/zipDir/{{artifactName}}"
  when: (extension.stdout == 'zip' )
    
- name: Download foo.conf
  get_url:
    url: {{ artifactoryAbsoluteUrl }}
    dest: {{ zipFileName }}
    url_username: {{artifactUserName}}
    url_password: {{artifact_password}} 
    mode: 0440
  when: not(
          (zipFileName is undefined)
          or
          (zipFileName  is none)
          or
          (zipFileName | trim == '')
        )
     
#- name: Download artifact from Artifactory if it is zip
#  shell: " curl -u {{artifactUserName}}:{{artifact_password}} {{ artifactoryAbsoluteUrl }} -fo {{ zipFileName }}"
#  when: not(
#          (zipFileName is undefined)
#          or
#          (zipFileName  is none)
#          or
 #         (zipFileName | trim == '')
 #       )
 # no_log: true

