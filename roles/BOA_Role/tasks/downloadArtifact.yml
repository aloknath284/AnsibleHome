---
- name: Artfactory absolute path is set
  set_fact:
     artifactoryAbsoluteUrl: "{{artifactoryUrl}}{{artifactName}}"
  no_log: true
  
- name: Find artifact file type
  shell: "echo '{{artifactName}}' |awk -F . '{if (NF>1) {print $NF}}'"
  register: extension
  
- name: CreateArtifactStore Directory for tar
  file:
    path: "{{buildBaseDir}}/tarDir"
    state: directory
    recurse: yes
  when: (extension.stdout == 'tar' )  
  
- name: CreateArtifactStore Directory for Zip
  file:
    path: "{{buildBaseDir}}/zipDir"
    state: directory
    recurse: yes
  when: (extension.stdout == 'zip' )


  
- name: TarFileName is set
  set_fact:
     tarFileName: "{{buildBaseDir}}/tarDir/{{artifactName}}"
  when: (extension.stdout == 'tar' )

- name:  Download artifact from Artifactory if it is tar
  get_url:
    url: "{{ artifactoryAbsoluteUrl }}"
    dest: "{{ tarFileName }}"
    url_username: "{{artifactUserName}}"
    url_password: "{{artifact_password}}" 
    #mode: 0440
  when: (extension.stdout == 'tar' )

- name: ZipFileName is set
  set_fact:
     zipFileName: "{{buildBaseDir}}/zipDir/{{artifactName}}"
  when: (extension.stdout == 'zip' )
    
- name:  Download artifact from Artifactory if it is zip
  get_url:
    url: "{{ artifactoryAbsoluteUrl }}"
    dest: "{{ zipFileName }}"
    url_username: "{{artifactUserName}}"
    url_password: "{{artifact_password}}" 
    #mode: 0440
  when: (extension.stdout == 'zip' )
